<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ConfigManager</name>
    </assembly>
    <members>
        <member name="T:ConfigManager.ConfigurationItem">
            <summary>
            A data type containing metadata about a configuration item.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigurationItem.Name">
            <summary>
            The name of the configuration item.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigurationItem.Data">
            <summary>
            The raw configuration data.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigurationItem.LastUpdated">
            <summary>
            The time the configuration file was last updated.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigurationItem.FromConfigManager">
            <summary>
            A bool indicating whether the configuration item came from
            ConfigManager or a user-specified source delegate.
            </summary>
        </member>
        <member name="T:ConfigManager.Configuration">
            <summary>
            A data type containing metadata about a configuration file.
            </summary>
        </member>
        <member name="P:ConfigManager.Configuration.Raw">
            <summary>
            The raw text read from the configuration file.
            </summary>
        </member>
        <member name="P:ConfigManager.Configuration.FilePath">
            <summary>
            The filepath to the configuration file.
            </summary>
        </member>
        <member name="P:ConfigManager.Configuration.LastUpdated">
            <summary>
            The time the configuration file was last updated.
            </summary>
        </member>
        <member name="T:ConfigManager.ConfigManager">
            <summary>
            A utility class to make managing configuration files painless.
            ConfigManager uses json configuration files which map to strongly
            typed C# objects using ServiceStack.Text.DeserializeJson
            </summary>
        </member>
        <member name="M:ConfigManager.ConfigManager.AddConfig``1(System.String,System.String,System.Boolean)">
            <summary>
            Adds a configuration to the manager.
            </summary>
            <typeparam name="T">
            The type of the configuration object.
            </typeparam>
            <param name="configName">
            The name of the configuration object to add.
            </param>
            <param name="configPath">
            The file path (relative or absolute) to add.
            </param>
            <param name="update">
            Optional boolean argument that specifies
            the config should be updated if it exists.
            </param>
        </member>
        <member name="M:ConfigManager.ConfigManager.GetCreateConfig``1(System.String,System.String,System.Boolean)">
            <summary>
            Adds and then gets the configuration of a given name.
            </summary>
            <typeparam name="T">
            The type of the configuration object.
            </typeparam>
            <param name="configName">
            The name of the configuration object to add.
            </param>
            <param name="configPath">
            The file path (relative or absolute) to add.
            </param>
            <param name="update">
            Optional boolean argument that specifies the
            config should be updated if it exists.
            </param>
            <returns>
            An object of type T with the values in the specified config file.
            </returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.CreateConfig``1(System.String,System.String)">
            <summary>
            Creates a Configuration of the given type
            from the specified file path.
            </summary>
            <typeparam name="T">
            The type of the configuration object.
            </typeparam>
            <param name="configName">
            The name of the configuration.
            </param>
            <param name="configPath">
            The file path (relative or absolute) of the configuration file.
            </param>
            <returns>
            An object of type T with the values in the specified config file.
            </returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.GetConfigFromFile(System.String,System.String)">
            <summary>
            Gets a configuration item from a file.
            </summary>
            <param name="name">The name of the configuration.</param>
            <param name="path">The path of the file.</param>
            <returns>
            The configuration item pulled from the specified file.
            </returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.GetConfigFromDelegate(System.String)">
            <summary>
            Get a configuration item from a delegate.
            </summary>
            <param name="name">The name of the configuration.</param>
            <returns>The configuration item pulled from the delegate.</returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.RemoveConfig(System.String)">
            <summary>
            Remove the specified config file from the ConfigManager
            </summary>
            <param name="key">The specified config file key</param>
        </member>
        <member name="M:ConfigManager.ConfigManager.GetConfig``1(System.String)">
            <summary>
            Returns the configuration object of the specified type and name
            from the in-memory dictionary of the ConfigManager.
            </summary>
            <typeparam name="T">The type of the configuration object.
            </typeparam>
            <param name="configName">The name of the configuration
            object to retrieve.</param>
            <returns>An object of type T with the values in the
            ConfigManager.</returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.GetConfigUpdateTime(System.String)">
            <summary>
            Returns the DateTime that the specified file was last written to.
            </summary>
            <param name="configPath">The file path.</param>
            <returns>
            The DateTime that the specified file was last written to.
            </returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.ReadConfig(System.String)">
            <summary>
            Reads a relative or absolute file path and returns the contents.
            Nonrooted file paths are checked relative to the configured
            search directories.
            </summary>
            <param name="configPath">The file path.</param>
            <returns>The contents of the file that was found, or empty string
            if no file present.</returns>
        </member>
        <member name="M:ConfigManager.ConfigManager.ParseConfig``1(System.String)">
            <summary>
            Parses json into the specified object type.
            </summary>
            <typeparam name="T">The object type to return.</typeparam>
            <param name="configRaw">The raw json.</param>
            <returns>
            The contents of the raw json as the specified object type.
            </returns>
        </member>
        <member name="P:ConfigManager.ConfigManager.DevMode">
            <summary>
            Development mode. If true, ConfigManager will look for
            files ending with .dev.conf rather than .conf
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigManager.Log">
            <summary>
            User provided Log function.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigManager.LogException">
            <summary>
            User provided LogException function
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigManager.GetConfiguration">
            <summary>
            A delegate settable by the user which says how to try
            and get the configuration before going to the file system.
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigManager.PutConfiguration">
            <summary>
            A delegate settable by the user which says what to do after
            getting the configuration from the file system.
            </summary>
        </member>
        <member name="T:ConfigManager.ConfigManager.ConfigKeys">
            <summary>
            A Utility Enum to ensure that typos aren't make for
            global configuration files.
            </summary>
        </member>
        <member name="F:ConfigManager.ConfigManager.ConfigKeys.ConfigPathsConfig">
            <summary>
            Maps to the string of the same name.
            </summary>
        </member>
        <member name="T:ConfigManager.ConfigClasses.ConfigPathsConfig">
            <summary>
            The strongly typed class to deserialize the
            global configuration file ConfigPaths.conf
            </summary>
        </member>
        <member name="M:ConfigManager.ConfigClasses.ConfigPathsConfig.#ctor">
            <summary>
            Contructs the configuration with the default
            values for search paths, which are: the local
            application root directory, C:/Configs, and
            D:/Configs
            </summary>
        </member>
        <member name="P:ConfigManager.ConfigClasses.ConfigPathsConfig.Paths">
            <summary>
            An ordered list of search paths to search
            in for configuration files.
            </summary>
        </member>
    </members>
</doc>
